#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Mar 14, 2019 07:43:38 PM +03  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import dir_GUI_support, work_with_db
import tkinter.messagebox

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    dir_GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    dir_GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:

    def create_doc(self):
                    name = self.Entry2.get()
                    type_ = self.Listbox1.get(tk.ACTIVE)
                    path_ = self.Entry3.get()
                    if (name and type_ and path_):
                        tkinter.messagebox.showinfo("Инфо", work_with_db.db.create_doc(name, type_, path_, self.Scale1.get()))
                        self.fill_tables()
                    else:
                        tkinter.messagebox.showinfo("Инфо", "Пожалуйста, заполните все поля и выберите тип документа")

    def delete_doc(self):
        tkinter.messagebox.showinfo("Инфо", work_with_db.db.delete_doc(self.Entry4.get()))
        self.fill_tables()

    def confirm(self):
            doc_n = self.Entry1.get()
            if doc_n:
                tkinter.messagebox.showinfo("Инфо", work_with_db.db.commit_doc(doc_n))
                self.fill_tables()
            else:
                tkinter.messagebox.showinfo("Инфо", "Пожалуйста, заполните все поля")

    def fill_tables(self):

        self.Scrolledtreeview1.delete(*self.Scrolledtreeview1.get_children())
        self.Scrolledtreeview2.delete(*self.Scrolledtreeview2.get_children())

        table1 = work_with_db.db.load_docs()
        table2 = work_with_db.db.load_agreement()

        with open("log.txt", "r") as f:
                self.Scrolledtext1.delete(1.0, tk.END)
                self.Scrolledtext1.insert(tk.INSERT, f.read()) 

        for i in range(len(table1)):

            if table1[i]["is_confirmed"] == 0:
                self.Scrolledtreeview1.insert("", 0, text=table1[i]["id_doc"], values=(table1[i]["doc_access"],
                                                                                        table1[i]["doc_name"],
                                                                                        table1[i]["doc_type"],
                                                                                        table1[i]["agreement_date"],
                                                                                        table1[i]["date_create"],
                                                                                        "Не подтвержден",
                                                                                        table1[i]["path"]))
            else:
                self.Scrolledtreeview1.insert("", 0, text=table1[i]["id_doc"], values=(table1[i]["doc_access"],
                                                                                        table1[i]["doc_name"],
                                                                                        table1[i]["doc_type"],
                                                                                        table1[i]["agreement_date"],
                                                                                        table1[i]["date_create"],
                                                                                        "Подтвержден",
                                                                                        table1[i]["path"]))

        for q in range(len(table2)):
            self.Scrolledtreeview2.insert("", 0, text=table2[q]["agreement"], values=(table2[q]["agreement_date"],
                                                                                    table2[q]["document_id_doc"],
                                                                                    table2[q]["employee_id_employee"]))

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x448+683+359")
        top.title("Вы вошли как: Директор")
        top.configure(background="#dbffec")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=8, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])

        PNOTEBOOK = "ClosetabNotebook" 

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.PNotebook1 = ttk.Notebook(top)
        self.PNotebook1.place(relx=0.0, rely=0.0, relheight=0.884
                , relwidth=1.007)
        self.PNotebook1.configure(width=300)
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t0 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t0, padding=3)
        self.PNotebook1.tab(0, text="Документы/Соглашения",compound="none",underline="-1",)
        self.PNotebook1_t0.configure(background="#d9d9d9")
        self.PNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t0.configure(highlightcolor="black")
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(1, text="Операции с документами",compound="none",underline="-1",)
        self.PNotebook1_t1.configure(background="#d9d9d9")
        self.PNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t1.configure(highlightcolor="black")

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.PNotebook1_t0)
        self.Scrolledtreeview1.place(relx=0.0, rely=0.0, relheight=0.559
                , relwidth=1.0)
        self.Scrolledtreeview1.configure(columns=["Col1", "Col2", "Col3", "Col4", "Col5", "Col6", "Col7"])

        self.Scrolledtreeview1.heading("#0",text="Номер")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="90")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")

        self.Scrolledtreeview1.heading("Col1",text="Доступ")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="95")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.Scrolledtreeview1.heading("Col2",text="Название")
        self.Scrolledtreeview1.heading("Col2",anchor="center")
        self.Scrolledtreeview1.column("Col2",width="130")
        self.Scrolledtreeview1.column("Col2",minwidth="20")
        self.Scrolledtreeview1.column("Col2",stretch="1")
        self.Scrolledtreeview1.column("Col2",anchor="w")

        self.Scrolledtreeview1.heading("Col3",text="Тип")
        self.Scrolledtreeview1.heading("Col3",anchor="center")
        self.Scrolledtreeview1.column("Col3",width="100")
        self.Scrolledtreeview1.column("Col3",minwidth="20")
        self.Scrolledtreeview1.column("Col3",stretch="1")
        self.Scrolledtreeview1.column("Col3",anchor="w")

        self.Scrolledtreeview1.heading("Col4",text="Дата согласования")
        self.Scrolledtreeview1.heading("Col4",anchor="center")
        self.Scrolledtreeview1.column("Col4",width="130")
        self.Scrolledtreeview1.column("Col4",minwidth="20")
        self.Scrolledtreeview1.column("Col4",stretch="1")
        self.Scrolledtreeview1.column("Col4",anchor="w")

        self.Scrolledtreeview1.heading("Col5",text="Дата создания")
        self.Scrolledtreeview1.heading("Col5",anchor="center")
        self.Scrolledtreeview1.column("Col5",width="130")
        self.Scrolledtreeview1.column("Col5",minwidth="20")
        self.Scrolledtreeview1.column("Col5",stretch="1")
        self.Scrolledtreeview1.column("Col5",anchor="w")

        self.Scrolledtreeview1.heading("Col6",text="Подтверждение")
        self.Scrolledtreeview1.heading("Col6",anchor="center")
        self.Scrolledtreeview1.column("Col6",width="100")
        self.Scrolledtreeview1.column("Col6",minwidth="20")
        self.Scrolledtreeview1.column("Col6",stretch="1")
        self.Scrolledtreeview1.column("Col6",anchor="w")

        self.Scrolledtreeview1.heading("Col7",text="Путь")
        self.Scrolledtreeview1.heading("Col7",anchor="center")
        self.Scrolledtreeview1.column("Col7",width="250")
        self.Scrolledtreeview1.column("Col7",minwidth="20")
        self.Scrolledtreeview1.column("Col7",stretch="1")
        self.Scrolledtreeview1.column("Col7",anchor="w")

        self.Scrolledtreeview2 = ScrolledTreeView(self.PNotebook1_t0)
        self.Scrolledtreeview2.place(relx=0.0, rely=0.541, relheight=0.451
                , relwidth=1.0)
        self.Scrolledtreeview2.configure(columns=["Col1", "Col2", "Col3"])
        self.Scrolledtreeview2.heading("#0",text="Номер")
        self.Scrolledtreeview2.heading("#0",anchor="center")
        self.Scrolledtreeview2.column("#0",width="90")
        self.Scrolledtreeview2.column("#0",minwidth="20")
        self.Scrolledtreeview2.column("#0",stretch="1")
        self.Scrolledtreeview2.column("#0",anchor="w")

        self.Scrolledtreeview2.heading("Col1",text="Дата соглашения")
        self.Scrolledtreeview2.heading("Col1",anchor="center")
        self.Scrolledtreeview2.column("Col1",width="130")
        self.Scrolledtreeview2.column("Col1",minwidth="20")
        self.Scrolledtreeview2.column("Col1",stretch="1")
        self.Scrolledtreeview2.column("Col1",anchor="w")

        self.Scrolledtreeview2.heading("Col2",text="id документа")
        self.Scrolledtreeview2.heading("Col2",anchor="center")
        self.Scrolledtreeview2.column("Col2",width="110")
        self.Scrolledtreeview2.column("Col2",minwidth="20")
        self.Scrolledtreeview2.column("Col2",stretch="1")
        self.Scrolledtreeview2.column("Col2",anchor="w")

        self.Scrolledtreeview2.heading("Col3",text="id создателя")
        self.Scrolledtreeview2.heading("Col3",anchor="center")
        self.Scrolledtreeview2.column("Col3",width="281")
        self.Scrolledtreeview2.column("Col3",minwidth="20")
        self.Scrolledtreeview2.column("Col3",stretch="1")
        self.Scrolledtreeview2.column("Col3",anchor="w")

        self.TSeparator1 = ttk.Separator(self.PNotebook1_t1)
        self.TSeparator1.place(relx=0.533, rely=0.0, relheight=1.243)
        self.TSeparator1.configure(orient="vertical")

        self.Label2 = tk.Label(self.PNotebook1_t1)
        self.Label2.place(relx=0.017, rely=0.027, height=21, width=129)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Название документа:''')

        self.Entry2 = tk.Entry(self.PNotebook1_t1)
        self.Entry2.place(relx=0.017, rely=0.108,height=20, relwidth=0.273)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")

        self.Label3 = tk.Label(self.PNotebook1_t1)
        self.Label3.place(relx=0.017, rely=0.189, height=21, width=105)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Путь к документу:''')

        self.Entry3 = tk.Entry(self.PNotebook1_t1)
        self.Entry3.place(relx=0.017, rely=0.27,height=20, relwidth=0.273)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        self.Label4 = tk.Label(self.PNotebook1_t1)
        self.Label4.place(relx=0.017, rely=0.351, height=21, width=101)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Уровень доступа:''')

        self.Scale1 = tk.Scale(self.PNotebook1_t1)
        self.Scale1.place(relx=0.017, rely=0.432, relwidth=0.177, relheight=0.0
                , height=42, bordermode='ignore')
        self.Scale1.configure(from_=0, to=1, orient=tk.HORIZONTAL)
        self.Scale1.configure(activebackground="#ececec")
        self.Scale1.configure(background="#d9d9d9")
        self.Scale1.configure(font="TkTextFont")
        self.Scale1.configure(foreground="#000000")
        self.Scale1.configure(highlightbackground="#d9d9d9")
        self.Scale1.configure(highlightcolor="black")
        self.Scale1.configure(orient="horizontal")
        self.Scale1.configure(troughcolor="#d9d9d9")

        self.Label5 = tk.Label(self.PNotebook1_t1)
        self.Label5.place(relx=0.3, rely=0.027, height=21, width=91)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Тип документа:''')

        self.Listbox1 = tk.Listbox(self.PNotebook1_t1)
        self.Listbox1.place(relx=0.3, rely=0.108, relheight=0.438
                , relwidth=0.207)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.configure(width=124)

        self.TSeparator2 = ttk.Separator(self.PNotebook1_t1)
        self.TSeparator2.place(relx=0.0, rely=0.676, relwidth=0.533)

        self.create_btn = tk.Button(self.PNotebook1_t1)
        self.create_btn.place(relx=0.217, rely=0.568, height=24, width=54)
        self.create_btn.configure(activebackground="#ececec")
        self.create_btn.configure(activeforeground="#000000")
        self.create_btn.configure(background="#d9d9d9")
        self.create_btn.configure(disabledforeground="#a3a3a3")
        self.create_btn.configure(foreground="#000000")
        self.create_btn.configure(highlightbackground="#d9d9d9")
        self.create_btn.configure(highlightcolor="black")
        self.create_btn.configure(pady="0")
        self.create_btn.configure(text='''Создать''')
        self.create_btn.configure(command=self.create_doc)

        self.Label6 = tk.Label(self.PNotebook1_t1)
        self.Label6.place(relx=0.55, rely=0.027, height=21, width=249)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Введите номер документа:''')

        self.Entry4 = tk.Entry(self.PNotebook1_t1)
        self.Entry4.place(relx=0.55, rely=0.108,height=20, relwidth=0.273)
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="black")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(selectbackground="#c4c4c4")
        self.Entry4.configure(selectforeground="black")

        self.delete_btn = tk.Button(self.PNotebook1_t1)
        self.delete_btn.place(relx=0.717, rely=0.189, height=24, width=55)
        self.delete_btn.configure(activebackground="#ececec")
        self.delete_btn.configure(activeforeground="#000000")
        self.delete_btn.configure(background="#d9d9d9")
        self.delete_btn.configure(disabledforeground="#a3a3a3")
        self.delete_btn.configure(foreground="#000000")
        self.delete_btn.configure(highlightbackground="#d9d9d9")
        self.delete_btn.configure(highlightcolor="black")
        self.delete_btn.configure(pady="0")
        self.delete_btn.configure(text='''Удалить''')
        self.delete_btn.configure(command=self.delete_doc)

        self.TSeparator3 = ttk.Separator(self.PNotebook1_t1)
        self.TSeparator3.place(relx=0.533, rely=0.297, relwidth=0.467)

        self.Scrolledtext1 = ScrolledText(self.PNotebook1_t1)
        self.Scrolledtext1.place(relx=0.533, rely=0.405, relheight=0.597
                , relwidth=0.468)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap='none')

        self.Label7 = tk.Label(self.PNotebook1_t1)
        self.Label7.place(relx=0.717, rely=0.324, height=21, width=53)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''История''')

        self.Label1 = tk.Label(self.PNotebook1_t1)
        self.Label1.place(relx=0.017, rely=0.73, height=21, width=173)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Подтвердить документ номер:''')

        self.Entry1 = tk.Entry(self.PNotebook1_t1)
        self.Entry1.place(relx=0.017, rely=0.811,height=20, relwidth=0.273)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")

        self.Button1 = tk.Button(self.PNotebook1_t1)
        self.Button1.place(relx=0.2, rely=0.905, height=24, width=81)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Подтвердить''')
        self.Button1.configure(command=self.confirm)
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)

        self.refresh_btn = tk.Button(top)
        self.refresh_btn.place(relx=0.783, rely=0.915, height=24, width=65)
        self.refresh_btn.configure(activebackground="#ececec")
        self.refresh_btn.configure(activeforeground="#000000")
        self.refresh_btn.configure(background="#d9d9d9")
        self.refresh_btn.configure(disabledforeground="#a3a3a3")
        self.refresh_btn.configure(foreground="#000000")
        self.refresh_btn.configure(highlightbackground="#d9d9d9")
        self.refresh_btn.configure(highlightcolor="black")
        self.refresh_btn.configure(pady="0")
        self.refresh_btn.configure(text='''Обновить''')
        self.refresh_btn.configure(command=self.fill_tables)

        self.exit_btn = tk.Button(top)
        self.exit_btn.place(relx=0.9, rely=0.915, height=24, width=45)
        self.exit_btn.configure(activebackground="#ececec")
        self.exit_btn.configure(activeforeground="#000000")
        self.exit_btn.configure(background="#d9d9d9")
        self.exit_btn.configure(disabledforeground="#a3a3a3")
        self.exit_btn.configure(foreground="#000000")
        self.exit_btn.configure(highlightbackground="#d9d9d9")
        self.exit_btn.configure(highlightcolor="black")
        self.exit_btn.configure(pady="0")
        self.exit_btn.configure(text='''Выход''')
        self.exit_btn.configure(command=quit)

        self.fill_tables()

        for item in ["Приказ", "Договор", "Соглашение"]:
            self.Listbox1.insert(tk.END, item)

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





